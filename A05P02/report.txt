The program implements the marching cubes algorithm, this algorithm was implement with the help of the source found online: from http://paulbourke.net/geometry/polygonise/. The author of this website is Paul Bourke, he is also the author of the algorithm.He provided the tables needed to apply the algorithm and in depth description of how his algorithm works. 


The program implements the original form of the Marching Cubes algorithm. The user upon opening the program will be prompted to which files to open. Then when the user has selected the file then the program will perform the Marching Cubes algorithm. The user can select two option or choose a iso value or he/she can display the box that contains the mesh. To change the iso value the user has at his/her disposal a slider to select the value of his/her choice. By sliding, and so by changing the iso value the mesh will change shape accordingly. The user also has the possibility to move/look around the mesh to see better what he/she is looking for. This was accomplished by using the ofeasycam feature in open-frameworks. I also implement a light system that helped the user to see the value that he/she is looking for. The other feature is display the box containing the mesh. The user can select and de-select this option and I think it helps a lot when you dealing with low isovalue. I think slicing was less effective than this part2. I just think the user can see better the values. Also the user can by changing the isovalue can see see immediately the value that he or she is looking. Moreover over, the mesh created with the marching and cubes looks very nice and it was actually “fun” implementing the algorithm(it was challenging  for me, but it was for satisfying at the end). Sure, there is more interaction with the marching and cubes, because the user needs to move the camera or isovalue and easycam in this case is not super easy to deal with, but at the end I think it gives a good idea of the data. However, it has some limitation because in this part you can not just slice the data here we are basically filtering the data which doesn’t show everything from the data. For example I cannot see from the engine data that shape is hollow in certain area, sure if a person is knowledgeable or play a bit with the iso value you can see that characteristic of the data. Maybe a feature that can be useful is instead of having just one isovalue, it can be interesting to implement the same type of application by using a range value, like the one used for parallel coordinates system.
By looking at the two data set I discover:
- By looking the hydrogen data set. I can see that higher scalar value are towards the middle of the shape.In fact, if a high isovalue is selected then just “one point” is drawn on the screen. It also seems that the majority of the data is present on 1/4 of the data range. So the data is equally distributed, by setting a isovalue of 40, the shape is almost gone, considering that the max value for this data set is 250.
- by looking at the tooth dataset I found that the shape of tooth is recognizable if the isovalue is set to a pretty middle/high scalar value. After the the tooth has higher scalar value on the top and lower scalar value on the bottom. The top part of the tooth ha pretty much the same scalar value in fact by just increasing a bit the isovalue the overall shape is gone. This situation is noticeable when the isovalue is pretty high and just the top part is visible. By playing a little bit with the data it also interesting see the inside of the tooth, fascinating the ability too see the inside. I was able to see what I think are the roots of the tooth. And also the pulp cavity. 